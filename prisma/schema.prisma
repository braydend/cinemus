// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model List {
    id      String       @id @default(cuid())
    name    String
    media   Media[]
    members ListMember[]

    owner     User     @relation(fields: [ownerId], references: [id])
    ownerId   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model ListMember {
    user   User   @relation(fields: [userId], references: [id])
    userId String
    List   List   @relation(fields: [listId], references: [id])
    listId String

    @@id([userId, listId])
}

model UserPreferences {
    user                User    @relation(fields: [userId], references: [id])
    watchProviderRegion String?
    userId              String  @id
}

model Media {
    id        String
    type      String
    isWatched Boolean  @default(false)
    isLiked   Boolean?
    List      List     @relation(fields: [listId], references: [id])
    listId    String

    @@id([id, type, listId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? @db.Text
    refresh_token_expires_in Int?
    access_token             String? @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String            @id @default(cuid())
    name            String?
    email           String?           @unique
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    ListMember      ListMember[]
    List            List[]
    UserPreferences UserPreferences[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
